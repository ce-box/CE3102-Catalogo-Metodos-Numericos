function archivo_cota_poly_inter  pkg load symbolic  warning('off', 'all');  f='exp(x)';    display(["Ejemplo 1: Funcion:  " f " En los puntos: " ])  puntos=[1 exp(1);2 exp(2);3 exp(3)]  cota_error=cota_poly_inter(f,puntos);  display("")  f2='sin((pi*x)/2)';  display(["Ejemplo 2: Funcion:  " f2 " En los puntos: " ])  puntos2=[-1;0;1;2]  cota_error=cota_poly_inter(f2,puntos2);  endfunction cota_error=cota_poly_inter(f,puntos)  [n, m] = size(puntos);  polinomio=1;  x = sym ('x');  for i=1:n    polinomio=polinomio*(x-puntos(i,1));  endfor
  fact=1/factorial(n);  puntos_x=puntos(1:n,1);  f=sym(f);  fd=f;  for j=1:n    fd=diff(fd,'x');  endfor  fd=matlabFunction(fd);
  valores_evaluados=[fd(puntos_x)];  [fmax]=max(valores_evaluados);  extremos=[min(puntos_x) max(puntos_x)];  pi=calcular_max(polinomio,extremos);  cota_error=fact*fmax*pi      endfunction fmax=calcular_max(f,extremos)  x = sym ('x');#Defino la variable symbolic  f = sym(f);#Transforma la funcion a simbolica  a=extremos(1);#Separto los extremos  b=extremos(2);  f1=matlabFunction(f);#Obtengo la funcion en tipo matlab  fd = expand(diff(f,'x'))==0;#Calculo la primera derivada con respecto a x    puntos_criticos = double(solve(fd,'x'));#Obtenego los puntos criticos  puntos_a_evaluar=[a b puntos_criticos'];#Obtengo los puntos a evaluar en la funcion  valores_evaluados= [f1(puntos_a_evaluar)];#Obtengo array con los valores evaluados en la funcion  valores_evaluados=abs(valores_evaluados);#Aplica el valor absoluto    [fmax]=max(valores_evaluados);#Se obtiene el valor maximo de Fend