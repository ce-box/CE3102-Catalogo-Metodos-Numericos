function archivo_cota_poly_inter  pkg load symbolic  warning('off', 'all');  clc;  f='exp(x)';    display(["Ejemplo 1: Funcion:  " f " En los puntos: " ])  puntos=[1 exp(1);2 exp(2);3 exp(3)]#ejemplo de ingreso de pares de ordenados  cota_error=cota_poly_inter(f,puntos);  display("")  f2='sin((pi*x)/2)';  display(["Ejemplo 2: Funcion:  " f2 " En los puntos: " ])  puntos2=[-1;0;1;2]#ejemplo de ingreso de puntos  cota_error=cota_poly_inter(f2,puntos2);#Ejemplo de ingreso de datos para la funcion  end%Funcion que realiza el metodo de cota de error de polinomio de interpolacion%Parametros de entrada%puntos -> una matriz (m x 2) o lista de puntos, %f -> Funcion que sera evaluada ejemplo "sen(x) o exp(x)"%Parametros de salida%cota_error -> El valor de la cota de error del polinomio de interpolacionfunction cota_error=cota_poly_inter(f,puntos)  [n, m] = size(puntos);#Obtiene el tamaño de la lista/matriz de puntos  polinomio=1;#Inicializa el polinomio(donde se guardara la ecuacion ((x-x0)(x-x1)...)  x = sym ('x');#Se crea la variable symbolic  for i=1:n    polinomio=polinomio*(x-puntos(i,1));#Se llena la funcion ((x-x0)(x-x1)...)  endfor
  fact=1/factorial(n);#Se calcula el valor de 1/n!  puntos_x=puntos(1:n,1);#Se obtienen los puntos en X de la lista/matriz  f=sym(f);#Crea la funcion symbolica  fd=f;  #Algoritmo para obtener el maximo en la funcion   for j=1:n    fd=diff(fd,'x');#Derivada n de la funcion  endfor  fd=matlabFunction(fd);
  valores_evaluados=[fd(puntos_x)];#Se evaluan los puntos x en la funcion derivada  [fmax]=max(valores_evaluados);#Se obtiene el valor maximo  extremos=[min(puntos_x) max(puntos_x)];#Se obtiene el valor maximo y minimo de los puntos X  pi=calcular_max(polinomio,extremos);#Se llama al metodo de calcular_max para obtener el maximo de la ecuacion polinomio  cota_error=fact*fmax*pi#Se obtiene el valor final de cota de error  end%Funcion que obtiene el valor maximo de la funcion "pi"(generada por (x-x0)(x-x1)...)%Parametros de entrada%f -> funcion "pi" (x-x0)(x-x1)... , extremos -> valores minimo y maximo de los puntos_x%Parametros de salida%fmax-> Es el valor maximo de f, evaluada en puntos criticos y extremosfunction fmax=calcular_max(f,extremos)  x = sym ('x');#Defino la variable symbolic  f = sym(f);#Transforma la funcion a simbolica  a=extremos(1);#Separto los extremos  b=extremos(2);  f1=matlabFunction(f);#Obtengo la funcion en tipo matlab  fd = expand(diff(f,'x'))==0;#Calculo la primera derivada con respecto a x  puntos_criticos = double(solve(fd,'x'));#Obtenego los puntos criticos  puntos_a_evaluar=[a b puntos_criticos'];#Obtengo los puntos a evaluar en la funcion  valores_evaluados= [f1(puntos_a_evaluar)];#Obtengo array con los valores evaluados en la funcion  valores_evaluados=abs(valores_evaluados);#Aplica el valor absoluto  [fmax]=max(valores_evaluados);#Se obtiene el valor maximo de Fend